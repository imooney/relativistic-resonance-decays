// reads in the TTree and saves histograms

// normalize plots

#include "TROOT.h"
#include "TH1.h"
#include "TFile.h"
#include "TTree.h"
#include "TBrowser.h"
#include "TH2.h"
#include "../Event.h"
#include "TCanvas.h"
#include "TImage.h"
#include <iostream>

using namespace std;

//Things to do:
//  1) Make histograms of information from events

void treeRead() 
{
	gSystem->Load("$EVENT/libEvent.so");

	// create 5 histograms to plot
	TH1F *e = new TH1F("e", "Energy", 100, 0, 2);
	TH1F *px = new TH1F("px", "Momentum in x", 100, -1, 2);
	TH1F *py = new TH1F("py", "Momentum in y", 100, -0.5, 0.5);
	TH1F *pz = new TH1F("pz", "Momentum in z", 100, -0.5, 0.5);
	TH1F *im = new TH1F("im", "Invariant Mass", 150, 0, 3);

	// create new file and ttree to save our file into
	TFile *f = new TFile("Resonance.root"); //Resonance.root is name of TFile
	TTree *t1 = (TTree*)f->Get("t1");

	// set branch to our event branch
	Event *currEvent = 0;
	t1->SetBranchAddress("Event", &currEvent);
	 
	int nEvents = t1->GetEntries();

	// create track that sums all track pairs together in a single event
	Track *eventSum = new Track(0,0,0,0,0);
	double eSum;
	double pxSum;
	double pySum;
	double pzSum;
	 
	// runs through all events in branch
	for (unsigned i = 0; i < nEvents; ++ i) 
	{
		// finds number of tracks in event
		t1->GetEntry(i);
     	int nTracks = currEvent->GetNumberOfTracks();

		// double for loop sums all pairs of tracks together
     	for (unsigned j = 0; j < nTracks; ++ j) 
		{
			for(unsigned k=nTracks-1; k>j; k--)
			{
				// creates new track for every pair
				eSum = currEvent->GetTrack(j)->E() + currEvent->GetTrack(k)->E();
				pxSum = currEvent->GetTrack(j)->Px() + currEvent->GetTrack(k)->Px();
				pySum = currEvent->GetTrack(j)->Py() + currEvent->GetTrack(k)->Py();
				pzSum = currEvent->GetTrack(j)->Pz() + currEvent->GetTrack(k)->Pz();
				
				eventSum->SetE(eSum);
				eventSum->SetPx(pxSum);
				eventSum->SetPy(pySum);
				eventSum->SetPz(pzSum);

				// plots every pair on histograms
				e->Fill(eventSum->E());
				px->Fill(eventSum->Px());
				py->Fill(eventSum->Py());
				pz->Fill(eventSum->Pz());
				im->Fill(eventSum->M());
			}
     	}
 	}

	// normalizing
	Double_t scale = 1/e->Integral();
	e->Scale(scale);

	scale = 1/px->Integral();
	px->Scale(scale);

	scale = 1/py->Integral();
	py->Scale(scale);

	scale = 1/pz->Integral();
	pz->Scale(scale);
	
	scale = 1/im->Integral();
	im->Scale(scale);
	 
	//Drawing
	TCanvas* c1 = new TCanvas("c1","c1",0,0,1500,800);
	c1->Divide(3,2);

	c1->cd(1);	e->Draw();
	c1->cd(2);	px->Draw();
	c1->cd(3);	py->Draw();
	c1->cd(4);	pz->Draw();
	c1->cd(5);	im->Draw();

	//Saving
	TImage *img = TImage::Create();
	img->FromPad(c1);
	img->WriteImage("output.png");

	f->Close(); c1->Close();

	delete e; delete px; delete py; delete pz; delete im; delete f; delete c1;

	
}

// loop on a tree
// read a sub-branch only (the branch containing the number of tracks)
// read all branches, when selection is positive
// histogram the results of a member function of the event object

